generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_URI")
}

// Core token model
model Token {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  address         String   @unique
  name            String?
  symbol          String?
  decimals        Int?
  imageURI        String?  // URI for the token image
  // Price related fields
  priceUSD        String?  // Latest price in USD
  priceChange1h   Float?   // 1h price change percentage
  priceChange24h  Float?   // 24h price change percentage
  priceChange7d   Float?   // 7d price change percentage
  volumeUSD24h    String?  // 24h trading volume in USD
  volume1h        String?  // 1h trading volume in USD
  volume7d        String?  // 7d trading volume in USD
  volume30d       String?  // 30d trading volume in USD
  volumeChange24h Float?   // 24h volume change percentage
  lastPriceUpdate DateTime? // When the price was last updated
  // Relationships
  pairsAsToken0   Pair[]   @relation("Token0")
  pairsAsToken1   Pair[]   @relation("Token1")
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  stablePair      String?  // Reference to a stable pair address for price discovery
  supply          TokenSupply?
}

// Token supply tracking
model TokenSupply {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  token       Token    @relation(fields: [tokenId], references: [id])
  tokenId     String   @unique @db.ObjectId
  total       String
  circulating String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Trading pair model
model Pair {
  id                 String           @id @default(auto()) @map("_id") @db.ObjectId
  address            String           @unique
  token0Id           String           @db.ObjectId
  token1Id           String           @db.ObjectId
  reserve0           String           // String for precise BigInt representation
  reserve1           String
  totalSupply        String
  // Fees and Protocol data
  feesPending0       String           @default("0")
  feesPending1       String           @default("0")
  feesCollected0     String           @default("0")
  feesCollected1     String           @default("0")
  // Relationships
  token0             Token            @relation("Token0", fields: [token0Id], references: [id])
  token1             Token            @relation("Token1", fields: [token1Id], references: [id])
  liquidityPositions LiquidityPosition[]
  swaps              Swap[]
  priceSnapshots     PriceSnapshot[]
  reserveSnapshots   PairReserveSnapshot[]
  // Timestamps
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  lastBlockUpdate    BigInt          // Using BigInt as per indexer
  // New metrics fields
  poolAPR            Float?
  volume1h           String?          @default("0")
  volume24h          String?          @default("0")
  volume7d           String?          @default("0")
  volume30d          String?          @default("0")
  volumeChange24h    Float?           @default(0)
  volumeTVLRatio     Float?

  @@index([token0Id, token1Id])
}

// Liquidity positions for individual LPs
model LiquidityPosition {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  pairId           String   @db.ObjectId
  userAddress      String
  liquidityTokens  String   // LP tokens held
  // Relationships
  pair             Pair     @relation(fields: [pairId], references: [id])
  // Timestamps
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  lastBlockNumber  BigInt   // Using BigInt as per indexer

  @@unique([pairId, userAddress])
  @@index([userAddress])
}

// Swap events
model Swap {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  pairId         String   @db.ObjectId
  txHash         String
  userAddress    String
  contractSender String?  // Added field for the contract that sent the event
  recipient      String   // Added field for the recipient address
  amountIn0      String   // Amount of token0 in (can be 0)
  amountIn1      String   // Amount of token1 in (can be 0)
  amountOut0     String   // Amount of token0 out (can be 0)
  amountOut1     String   // Amount of token1 out (can be 0)
  blockNumber    BigInt
  timestamp      BigInt
  pair           Pair     @relation(fields: [pairId], references: [id])
  createdAt      DateTime @default(now())

  @@index([userAddress])
  @@index([timestamp])
  @@unique([txHash, pairId])
}

// Price snapshots for historical data
model PriceSnapshot {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  pairId       String   @db.ObjectId
  price0       String?  // Price of token0 in terms of token1 (string for precision), nullable
  price1       String?  // Price of token1 in terms of token0 (string for precision), nullable
  timestamp    BigInt
  blockNumber  BigInt
  pair         Pair     @relation(fields: [pairId], references: [id])
  createdAt    DateTime @default(now())

  @@index([timestamp])
  @@index([pairId, timestamp])
}

// Pair reserve snapshots
model PairReserveSnapshot {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  pairId      String @db.ObjectId
  reserve0    String
  reserve1    String
  reserveUSD  String
  timestamp   BigInt
  pair        Pair   @relation(fields: [pairId], references: [id])

  @@index([timestamp])
  @@index([pairId])
}

// User aggregate stats
model UserStat {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  userAddress          String   @unique
  totalSwapCount       BigInt   @default(0)
  totalLpCount         BigInt   @default(0)
  swapVolumeUSD        String   @default("0")
  liquidityProvidedUSD String   @default("0")
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

// Factory state
model Factory {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  address          String   @unique
  pairCount        BigInt   @default(0)
  totalVolumeUSD   String   @default("0")
  totalFeesUSD     String   @default("0")
  feeTo            String?  // Address that collects fees
  feeToSetter      String?  // Address that can change feeTo
  launcher         String?  // Address of the launcher contract
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

// Indexer state for tracking progress
model IndexerState {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  key                String   @unique
  lastProcessedBlock BigInt
  updatedAt          DateTime @updatedAt
}

// Router events
model RouterEvent {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  eventType          String   // LiquidityETHAdded, SwapETHForExactTokens, etc.
  txHash             String
  userAddress        String   // Sender/user address
  contractSender     String?  // Contract that sent the event
  recipient          String?  // To address (if different from sender)
  tokenAddress       String   // Token address for liquidity events
  outputTokenAddress String?  // Output token address
  amountToken        String   // Token amount
  amountETH          String?  // ETH amount
  liquidity          String?  // Liquidity tokens minted
  method             String?  // The actual method called
  success            Boolean  @default(true)
  blockNumber        BigInt
  timestamp          BigInt
  createdAt          DateTime @default(now())

  @@index([userAddress])
  @@index([eventType])
  @@index([txHash])
  @@index([timestamp])
  @@unique([txHash, eventType, blockNumber])
}

// Staking positions
model StakingPosition {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  userAddress         String   @unique
  ponderStaked        String   // Amount of PONDER tokens staked
  xPonderBalance      String   // Amount of xPONDER tokens held
  totalRewardsClaimed String   // Total rewards claimed by user
  lastTxHash          String?  // Last transaction hash
  lastBlockNumber     BigInt?  // Last block number processed
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

// Staking events
model StakingEvent {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  eventType       String   // Staked, Withdrawn, FeesClaimed
  userAddress     String
  ponderAmount    String   // Amount of PONDER involved
  xPonderAmount   String?  // Amount of xPONDER involved (for Staked/Withdrawn)
  txHash          String
  blockNumber     BigInt
  timestamp       BigInt
  createdAt       DateTime @default(now())

  @@index([userAddress])
  @@index([eventType])
  @@index([timestamp])
  @@unique([txHash, eventType, userAddress])
}

// Rebase events
model StakingRebase {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  totalSupply          String   // Total supply of xPONDER
  totalPonderBalance   String   // Total PONDER tokens in staking contract
  txHash               String
  blockNumber          BigInt
  timestamp            BigInt
  createdAt            DateTime @default(now())

  @@index([timestamp])
  @@unique([txHash, blockNumber])
}

// Aggregate staking metrics
model StakingMetric {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  timestamp           BigInt   @unique
  totalPonderStaked   String   // Total PONDER staked
  totalXPonderBalance String   // Total xPONDER supply
  totalRewardsClaimed String   // Total rewards claimed
  totalStakers        Int      // Number of unique stakers
  totalRebases        Int      // Number of rebases performed
  currentAPR          String?  // Current APR (calculated from rebases)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

// FarmingPool represents a staking pool in the MasterChef contract
model FarmingPool {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  pid                 Int                @unique // Pool ID in the MasterChef contract
  lpTokenAddress      String             // LP token address that can be staked
  allocPoint          String             // Allocation points for reward distribution
  lastRewardTime      BigInt            // Last time rewards were distributed
  depositFeeBP        Int                // Deposit fee in basis points (1% = 100)
  boostMultiplier     Int                // Maximum boost multiplier (10000 = 1.0x)
  totalStaked         String             // Total LP tokens staked in this pool
  totalWeightedShares String             // Total weighted shares after boost applied
  createdAt           DateTime           // When the pool was created
  updatedAt           DateTime           // When the pool was last updated

  // Relationships
  positions           FarmingPosition[]  // All positions in this pool
  events              FarmingEvent[]     // All events for this pool
  rewards             FarmingReward[]    // All rewards from this pool
}

// FarmingPosition represents a user's position in a farming pool
model FarmingPosition {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  userAddress      String    // User's wallet address
  pid              Int       // Pool ID reference
  amount           String    // LP tokens staked
  rewardDebt       String    // Used for reward calculation
  ponderStaked     String    // PONDER tokens staked for boost
  weightedShares   String    // Boosted share amount
  createdAt        DateTime  // When position was created
  updatedAt        DateTime  // When position was last updated
  lastTxHash       String    // Last transaction hash affecting this position
  lastBlockNumber  BigInt   // Block number of last transaction

  // Reference to the pool
  poolId           String    @db.ObjectId
  pool             FarmingPool @relation(fields: [poolId], references: [id])

  // Unique constraint
  @@unique([pid, userAddress])
  @@index([userAddress])
}

// FarmingEvent records all MasterChef events
model FarmingEvent {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  eventType          String    // Event type (Deposit, Withdraw, BoostStake, etc.)
  userAddress        String    // User address involved
  pid                Int       // Pool ID
  amount             String    // Amount of tokens involved
  txHash             String    // Transaction hash
  blockNumber        BigInt   // Block number
  timestamp          BigInt   // Timestamp
  newWeightedShares  String?   // For WeightedSharesUpdated event
  totalWeightedShares String?  // For WeightedSharesUpdated event
  emissionRate       String?   // For PonderPerSecondUpdated event
  createdAt          DateTime  @default(now())

  // Reference to the pool
  poolId             String?   @db.ObjectId
  pool               FarmingPool? @relation(fields: [poolId], references: [id])

  @@index([userAddress, pid])
  @@index([eventType])
  @@index([timestamp])
  @@unique([txHash, eventType, pid, userAddress])
}

// FarmingMetric stores aggregate farming statistics
model FarmingMetric {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  timestamp          BigInt    @unique // Timestamp as unique identifier
  totalFarmers       Int       // Total unique farmers
  totalPools         Int       // Total number of pools
  totalStaked        String    // Total LP tokens staked across all pools
  totalAllocPoint    String    // Total allocation points
  totalPonderStaked  String    // Total PONDER staked for boosts
  totalWeightedShares String    // Total weighted shares
  emissionRate       String    // PONDER emissions per second
  dailyEmissions     String?   // Calculated daily emissions
  tvlUSD             String?   // Total value locked in USD
  apr                String?   // Average APR across all pools
  createdAt          DateTime  // When record was created
  updatedAt          DateTime  // When record was last updated
}

// FarmingReward tracks reward claims and distributions
model FarmingReward {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  userAddress       String    // User who claimed rewards
  pid               Int       // Pool ID from which rewards were claimed
  amount            String    // Amount of PONDER claimed as reward
  txHash            String    // Transaction hash
  blockNumber       BigInt   // Block number
  timestamp         BigInt   // Timestamp
  createdAt         DateTime  @default(now())

  // Reference to the pool
  poolId            String    @db.ObjectId
  pool              FarmingPool @relation(fields: [poolId], references: [id])

  @@index([userAddress, timestamp])
  @@unique([txHash, pid, userAddress])
}

// FeeEvent records all fee-related events
model FeeEvent {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  eventType         String    // Event type (FeesDistributed, FeesCollected, FeesConverted, EmergencyTokenRecovered)
  tokenAddress      String?   // Token address for token-specific events
  amount            String    // Amount of tokens involved
  inputAmount       String?   // Input amount for conversions
  outputAmount      String?   // Output amount for conversions
  recipient         String?   // Recipient address for certain events
  txHash            String    // Transaction hash
  blockNumber       BigInt   // Block number
  timestamp         BigInt   // Timestamp
  createdAt         DateTime  @default(now())

  @@index([eventType])
  @@index([timestamp])
  @@index([tokenAddress])
  @@unique([txHash, eventType, blockNumber])
}

// FeeMetric stores fee statistics
model FeeMetric {
  id                       String    @id @default(auto()) @map("_id") @db.ObjectId
  timestamp                BigInt    @unique // Timestamp as unique identifier
  dailyFeesCollected       String    // Fees collected in the current day
  dailyFeesDistributed     String    // Fees distributed in the current day
  totalFeesCollected       String    // Total fees collected all-time
  totalFeesDistributed     String    // Total fees distributed all-time
  dailyVolumeUSD           String    // Total daily trading volume in USD
  totalVolumeUSD           String    // Total all-time volume in USD
  createdAt                DateTime  // When record was created
  updatedAt                DateTime  // When record was last updated
}

// ProtocolMetric combines all metrics for protocol dashboards
model ProtocolMetric {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  timestamp            Int
  totalValueLockedUSD  String
  liquidityPoolsTVL    String
  stakingTVL           String
  farmingTVL           String
  dailyVolumeUSD       String
  weeklyVolumeUSD      String
  monthlyVolumeUSD     String
  totalVolumeUSD       String
  dailyFeesUSD         String
  weeklyFeesUSD        String
  monthlyFeesUSD       String
  totalFeesUSD         String
  totalUsers           Int
  dailyActiveUsers     Int
  weeklyActiveUsers    Int
  monthlyActiveUsers   Int
  // New metrics fields
  volume1h             String?  @default("0")
  volume1hChange       Float?
  totalPairs           Int      @default(0)
  activePoolsCount     Int      @default(0)
}

// FactoryEvent model to track admin events on the factory
model FactoryEvent {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  eventType       String   // Type of event (FeeToUpdated, LauncherUpdated, FeeToSetterUpdated)
  oldValue        String?  // Old address value
  newValue        String?  // New address value
  txHash          String   // Transaction hash
  blockNumber     BigInt   // Block number
  timestamp       BigInt   // Block timestamp
  createdAt       DateTime @default(now())

  @@index([eventType])
  @@index([txHash])
  @@unique([txHash, eventType, blockNumber])
}

// Oracle events
model OracleEvent {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  eventType        String   // OracleUpdated, PairInitialized
  pairAddress      String   // Address of the pair
  price0Cumulative String?  // Cumulative price of token0
  price1Cumulative String?  // Cumulative price of token1
  txHash           String   // Transaction hash
  blockNumber      BigInt   // Block number
  timestamp        BigInt   // Block timestamp
  createdAt        DateTime @default(now())

  @@index([eventType])
  @@index([pairAddress])
  @@index([timestamp])
  @@unique([txHash, eventType, pairAddress, blockNumber])
}

// Oracle observation data
model OracleObservation {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  pairAddress      String   // Address of the pair
  timestamp        BigInt   // Block timestamp
  price0Cumulative String   // Cumulative price of token0
  price1Cumulative String   // Cumulative price of token1
  blockNumber      BigInt   // Block number
  observationIndex Int      // Index in the observations array
  createdAt        DateTime @default(now())

  @@index([pairAddress])
  @@index([timestamp])
  @@unique([pairAddress, observationIndex])
}

// Oracle state
model OracleState {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  pairAddress      String   @unique // Address of the pair
  currentIndex     Int      // Current index in the observation array
  lastUpdateTime   BigInt   // Last time the oracle was updated
  initialized      Boolean  @default(false) // Whether the pair has been initialized
  token0Address    String   // Address of token0
  token1Address    String   // Address of token1
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

// Oracle metrics
model OracleMetric {
  id                      String   @id @default(auto()) @map("_id") @db.ObjectId
  timestamp               BigInt   @unique // Timestamp as unique identifier
  totalInitializedPairs   Int      // Total number of initialized pairs
  totalObservations       Int      // Total number of observations recorded
  averageUpdateInterval   Int      // Average interval between updates in seconds
  dailyUpdateCount        Int      // Number of updates in the past 24 hours
  observationCardinality  Int      // Observation array size
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

// New model for tracking volume metrics over time
model VolumeMetric {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  timestamp       BigInt
  entity          String   // "pair", "token", or "protocol"
  entityId        String
  volume1h        String   @default("0")
  volume24h       String   @default("0")
  volume7d        String   @default("0")
  volume30d       String   @default("0")
  volumeChange1h  Float?   @default(0)
  volumeChange24h Float?   @default(0)
  volumeChange7d  Float?   @default(0)
  createdAt       DateTime @default(now())
  
  @@index([entity, entityId])
  @@index([timestamp])
}

// Entity Metrics - single source of truth for all metrics
model EntityMetrics {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  entity          String    // 'token', 'pair', or 'protocol'
  entityId        String    // ID of the entity this metric belongs to
  
  // Volume metrics
  volume1h        String    // 1h volume
  volume24h       String    // 24h volume
  volume7d        String    // 7d volume
  volume30d       String    // 30d volume
  volumeAll       String?   // All-time volume
  volumeChange24h Float?    // 24h volume change percentage
  volumeChange1h  Float?    // 1h volume change percentage
  volumeLastUpdated Int     // Timestamp of last volume update
  
  // TVL metrics
  tvl             String    // Current TVL
  tvlChange24h    Float?    // 24h TVL change percentage
  tvlLastUpdated  Int       // Timestamp of last TVL update
  
  // Fee metrics
  fees24h         String?   // 24h fees
  fees7d          String?   // 7d fees
  fees30d         String?   // 30d fees
  feesAll         String?   // All-time fees
  
  // Token-specific metrics
  priceUSD        String?   // Current price in USD
  priceChange24h  Float?    // 24h price change percentage
  priceChange1h   Float?    // 1h price change percentage
  priceChange7d   Float?    // 7d price change percentage
  marketCap       String?   // Market cap
  fdv             String?   // Fully diluted valuation
  
  // Pair-specific metrics
  reserve0        String?   // Current reserve0
  reserve1        String?   // Current reserve1
  reserveUSD      String?   // Current reserveUSD (for backwards compatibility)
  fee             String?   // Fee tier (e.g. "3" for 0.3%)
  poolAPR         Float?    // Pool APR
  volumeTVLRatio  Float?    // Volume/TVL ratio
  
  // Protocol-specific metrics
  totalPairs      Int?      // Total number of pairs
  totalTokens     Int?      // Total number of tokens
  
  // Timestamps
  lastUpdated     Int       // Timestamp of last update
  lastActivity    Int       // Timestamp of last activity
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Compound index for faster lookups
  @@unique([entity, entityId])
}

// Metric snapshots for historical data
model MetricSnapshot {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  entity          String    // 'token', 'pair', or 'protocol'
  entityId        String    // ID of the entity this snapshot belongs to
  metricType      String    // 'volume', 'tvl', 'price', etc.
  timeframe       String    // '1h', '24h', '7d', '30d', 'all'
  value           String    // Value of the metric
  timestamp       Int       // Timestamp when this snapshot was created
  lastCalculated  Int       // Timestamp when this value was last calculated
  hasActivity     Boolean   // Whether there was activity in this period
  confidence      Float     // How confident we are in this calculation (0-1)
  createdAt       DateTime  @default(now())

  // Index for faster lookups
  @@index([entity, entityId, metricType, timeframe])
}
