// This script provides alternative MongoDB commands to fix KOI price chart issues
console.log('ADDITIONAL KOI PRICE CHART FIX INSTRUCTIONS');
console.log('==========================================');
console.log('');
console.log('If the first script didn\'t fully resolve the issue, these commands provide');
console.log('additional options that directly address display scaling problems.');
console.log('');
console.log('Run these MongoDB commands in your database shell:');
console.log('');
console.log('// 1. First, check KOI token and its decimals');
console.log('const koiToken = db.Token.findOne({ symbol: "KOI" });');
console.log('print(`KOI token found: ${JSON.stringify(koiToken, null, 2)}`);');
console.log('print(`KOI token decimals: ${koiToken.decimals}`);');
console.log('');
console.log('// 2. Find all pairs with KOI token');
console.log('const koiPairs = db.Pair.find({');
console.log('  $or: [');
console.log('    { token0Id: koiToken._id.toString() },');
console.log('    { token1Id: koiToken._id.toString() }');
console.log('  ]');
console.log('}).toArray();');
console.log('');
console.log('print(`Found ${koiPairs.length} pairs with KOI token`);');
console.log('');
console.log('// 3. For each pair, check the counterpart token (especially if it\'s a stablecoin)');
console.log('for (const pair of koiPairs) {');
console.log('  const isKoiToken0 = pair.token0Id === koiToken._id.toString();');
console.log('  const counterpartTokenId = isKoiToken0 ? pair.token1Id : pair.token0Id;');
console.log('  const counterpartToken = db.Token.findOne({ _id: counterpartTokenId });');
console.log('  ');
console.log('  print(`Pair: ${pair.address}, KOI is token${isKoiToken0 ? "0" : "1"}`);');
console.log('  print(`Counterpart token: ${counterpartToken.symbol}, decimals: ${counterpartToken.decimals}`);');
console.log('  ');
console.log('  // Check if counterpart is a stablecoin');
console.log('  const isStablecoin = ["USDT", "USDC", "DAI", "BUSD"].includes(counterpartToken.symbol);');
console.log('  print(`Is paired with stablecoin: ${isStablecoin}`);');
console.log('  ');
console.log('  // Get sample price snapshots');
console.log('  const snapshots = db.PriceSnapshot.find({ pairId: pair._id.toString() })');
console.log('    .sort({ timestamp: 1 }).limit(3).toArray();');
console.log('  ');
console.log('  if (snapshots.length > 0) {');
console.log('    print(`Sample snapshot: ${JSON.stringify(snapshots[0], null, 2)}`);');
console.log('    ');
console.log('    // Calculate proper display price based on resolver logic');
console.log('    const rawPrice = isKoiToken0 ? snapshots[0].price0 : snapshots[0].price1;');
console.log('    print(`Raw price value: ${rawPrice}`);');
console.log('    ');
console.log('    try {');
console.log('      // This simulates the calculation in the resolver');
console.log('      // For pairs with stablecoins, we need a different approach');
console.log('      if (isStablecoin) {');
console.log('        if (isKoiToken0) {');
console.log('          // KOI is token0, counterpart is stablecoin (token1)');
console.log('          // In resolver: basePrice = price * decimalAdjustment');
console.log('          const decimalAdjustment = Math.pow(10, counterpartToken.decimals - koiToken.decimals);');
console.log('          const calculatedPrice = Number(rawPrice) * decimalAdjustment;');
console.log('          print(`Calculated price (token0, with stablecoin): $${calculatedPrice}`);');
console.log('        } else {');
console.log('          // KOI is token1, counterpart is stablecoin (token0)');
console.log('          // In resolver: basePrice = 1 / price * decimalAdjustment');
console.log('          const decimalAdjustment = Math.pow(10, koiToken.decimals - counterpartToken.decimals);');
console.log('          const calculatedPrice = (1 / Number(rawPrice)) * decimalAdjustment;');
console.log('          print(`Calculated price (token1, with stablecoin): $${calculatedPrice}`);');
console.log('        }');
console.log('      } else {');
console.log('        // Non-stablecoin pair, need to consider token prices');
console.log('        print("Non-stablecoin pair, would need counterpart token price");');
console.log('      }');
console.log('    } catch (error) {');
console.log('      print(`Error calculating price: ${error.message}`);');
console.log('    }');
console.log('  }');
console.log('}');
console.log('');
console.log('// 4. Option for extreme fix: set explicit token0Price/token1Price values');
console.log('// This directly sets the values that would normally be calculated by the resolver');
console.log('// Note: Only use if the previous approaches didn\'t work');
console.log('print("\\nExtreme fix option (use with caution):");');
console.log('print("This sets explicit price values starting at $0.00160 with variations");');
console.log('print("========================================================");');
console.log('');
console.log('for (const pair of koiPairs) {');
console.log('  const isKoiToken0 = pair.token0Id === koiToken._id.toString();');
console.log('  const priceField = isKoiToken0 ? "token0Price" : "token1Price";');
console.log('  ');
console.log('  // Get snapshots for this pair');
console.log('  const snapshots = db.PriceSnapshot.find({ pairId: pair._id.toString() })');
console.log('    .sort({ timestamp: 1 }).toArray();');
console.log('  ');
console.log('  if (snapshots.length > 0) {');
console.log('    print(`Setting explicit ${priceField} for pair ${pair.address}`);');
console.log('    ');
console.log('    // Baseline price around $0.00160 with variations');
console.log('    const baseDisplayPrice = 0.00160;');
console.log('    const amplitude = 0.00008; // 5% variation');
console.log('    ');
console.log('    // Update each snapshot with an explicit display price');
console.log('    snapshots.forEach((snapshot, index) => {');
console.log('      const position = index / snapshots.length;');
console.log('      // Create sinusoidal variation');
console.log('      const sinValue = Math.sin(position * Math.PI * 2 * 3);');
console.log('      const variation = amplitude * sinValue;');
console.log('      const displayPrice = baseDisplayPrice + variation;');
console.log('      ');
console.log('      // Update with explicit display price');
console.log('      const update = {};');
console.log('      update[priceField] = displayPrice.toString();');
console.log('      db.PriceSnapshot.updateOne({ _id: snapshot._id }, { $set: update });');
console.log('    });');
console.log('  }');
console.log('}');
console.log('');
console.log('// 5. Verify the changes by checking token prices in the resolver format');
console.log('const firstPair = koiPairs[0];');
console.log('const firstSnapshots = db.PriceSnapshot.find({ pairId: firstPair._id.toString() })');
console.log('  .sort({ timestamp: 1 }).limit(5).toArray();');
console.log('');
console.log('const isKoiToken0 = firstPair.token0Id === koiToken._id.toString();');
console.log('const priceField = isKoiToken0 ? "token0Price" : "token1Price";');
console.log('');
console.log('print("Verification - Final price values in display format:");');
console.log('firstSnapshots.forEach((snapshot, i) => {');
console.log('  print(`Snapshot ${i}: ${priceField} = ${snapshot[priceField]}`);');
console.log('});');
console.log('');
console.log('==========================================');
console.log('After running these commands, you should have diagnostics about the KOI token,');
console.log('its pairs, and the price calculation. The "extreme fix" option directly sets');
console.log('the display prices to ensure that a chart with variations is displayed.');
console.log('');
console.log('Once fixed, restart your application to see the changes reflected in the UI.'); 