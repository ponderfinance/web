// This script will generate MongoDB commands to fix KOI price chart issues
console.log('KOI PRICE CHART FIX INSTRUCTIONS');
console.log('===============================');
console.log('');
console.log('The issue with your price chart is that all snapshots have identical prices,');
console.log('causing the graph to display as a flat line. Additionally, the resolver');
console.log('may need to recalculate the displayed USD values.');
console.log('');
console.log('Run these MongoDB commands in your database shell:');
console.log('');
console.log('// 1. First, create a backup (run once)');
console.log('db.PriceSnapshot.find().toArray() > backup-snapshots.json');
console.log('');
console.log('// 2. Find KOI token and its pairs');
console.log('const koiToken = db.Token.findOne({ symbol: "KOI" });');
console.log('const koiPairs = db.Pair.find({');
console.log('  $or: [');
console.log('    { token0Id: koiToken._id.toString() },');
console.log('    { token1Id: koiToken._id.toString() }');
console.log('  ]');
console.log('}).toArray();');
console.log('');
console.log('// 3. Force price recalculation by removing token0Price/token1Price fields');
console.log('db.PriceSnapshot.updateMany(');
console.log('  { pairId: { $in: koiPairs.map(p => p._id.toString()) } },');
console.log('  { $unset: { token0Price: "", token1Price: "" } }');
console.log(');');
console.log('');
console.log('// 4. Create synthetic price variations for KOI pairs (important!)');
console.log('for (const pair of koiPairs) {');
console.log('  const isKoiToken0 = pair.token0Id === koiToken._id.toString();');
console.log('  const priceField = isKoiToken0 ? "price0" : "price1";');
console.log('');
console.log('  // Get all snapshots for this pair sorted by timestamp');
console.log('  const snapshots = db.PriceSnapshot.find({ pairId: pair._id.toString() })');
console.log('    .sort({ timestamp: 1 }).toArray();');
console.log('');
console.log('  if (snapshots.length > 0) {');
console.log('    print(`Creating synthetic price variations for pair ${pair.address}`);');
console.log('    const basePrice = BigInt(snapshots[0][priceField]);');
console.log('    // Create variation of 5% up and down');
console.log('    const amplitude = basePrice / 20n;');
console.log('');
console.log('    // Update each snapshot with a varied price');
console.log('    snapshots.forEach((snapshot, index) => {');
console.log('      const position = index / snapshots.length;');
console.log('      // Create sinusoidal variation over time (3 complete waves)');
console.log('      const sinValue = Math.sin(position * Math.PI * 2 * 3);');
console.log('      const variation = Number(amplitude) * sinValue;');
console.log('      const newPrice = Number(basePrice) + variation;');
console.log('');
console.log('      // Update this snapshot with the new price');
console.log('      db.PriceSnapshot.updateOne(');
console.log('        { _id: snapshot._id },');
console.log('        { $set: { [priceField]: newPrice.toString() } }');
console.log('      );');
console.log('    });');
console.log('  }');
console.log('}');
console.log('');
console.log('// 5. Verify the changes');
console.log('const firstPair = koiPairs[0];');
console.log('db.PriceSnapshot.find({ pairId: firstPair._id.toString() })');
console.log('  .sort({ timestamp: 1 }).limit(5);');
console.log('');
console.log('===============================');
console.log('After running these commands, the KOI token\'s chart should show price variations,');
console.log('making the chart more useful for tracking historical values. The resolver will');
console.log('recalculate the token0Price/token1Price values when the chart is rendered.'); 